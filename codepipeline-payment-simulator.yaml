AWSTemplateFormatVersion: '2010-09-09'
Description: DevSecOps CI/CD Pipeline for Transaction Simulator (Terraform-Driven with Lambda Canary).

Parameters:
  # GitHub repository parameters for the Transaction Simulator application code
  AppGitHubRepoName:
    Type: String
    Default: TransactionSimulator
    Description: Name of the GitHub repository containing the application code (e.g., my-payment-simulator)
  AppGitHubOwner:
    Type: String
    Default: 4Min4m
    Description: GitHub username or organization name for the application repository
  AppGitHubBranch:
    Type: String
    Default: main
    Description: Git branch to use for the application code (e.g., main)
  GitHubConnectionArn:
    Type: String
    Default: arn:aws:codeconnections:us-east-1:864981715490:connection/743c9fe4-1a25-46e1-b068-daf51b807075
    Description: The ARN of the AWS CodeStar Connections connection to GitHub.
Resources:
  # S3 Bucket for CodePipeline Artifacts
  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "transaction-simulator-pipeline-artifacts-${AWS::Region}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Project
          Value: TransactionSimulator
        - Key: Environment
          Value: PipelineArtifacts

  # IAM Role for CodePipeline
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TransactionSimulatorCodePipelineRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      # Broad access for demo, refine in production
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess # For artifact bucket
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess # For logs
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess # For Lambda deployments
        - arn:aws:iam::aws:policy/AWSSystemsManagerReadOnlyAccess # To read SSM parameters
      Policies:
        - PolicyName: CodePipelineInlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Permission to use the GitHub Connection
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref GitHubConnectionArn
              # Permissions to start CodeBuild projects
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codebuild:StopBuild
                  - codebuild:ListBuildsForProject
                Resource:
                  - !GetAtt FrontendBuildProject.Arn
                  - !GetAtt LambdaPackageProject.Arn
                  - !GetAtt StaticAnalysisProject.Arn
                  - !GetAtt TerraformPlanProject.Arn
                  - !GetAtt TerraformApplyProject.Arn
                  - !GetAtt SmokeTestsProject.Arn
              # Permissions to publish to SNS for manual approvals
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !GetAtt ManualApprovalSNSTopic.Arn
              # Permissions for CodeDeploy Lambda deployments
              - Effect: Allow
                Action:
                  - iam:PassRole # Allows CodeDeploy to assume its service role
                Resource: !GetAtt CodeDeployServiceRole.Arn


  # IAM Role for CodeDeploy Lambda Deployment
  # This role is assumed by CodeDeploy to perform traffic shifting for Lambda.
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TransactionSimulatorCodeDeployLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForLambda # Required for Lambda deployments
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess # CodeDeploy needs to invoke and update Lambda configurations
      Path: /
      # Inline policy for Lambda update/invocation permissions controlled by CodeDeploy
      Policies:
        - PolicyName: CodeDeployLambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateFunctionConfiguration
                  - lambda:ListVersionsByFunction
                  - lambda:GetAlias
                  - lambda:UpdateAlias
                  - lambda:CreateAlias
                Resource:
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:TransactionSimulatorAPI"
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:TransactionSimulatorAPI:*"
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:TransactionSimulatorAPI:LIVE"
                  - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:TransactionSimulatorAPI:BETA"
              - Effect: Allow
                Action:
                  - apigateway:GET
                  - apigateway:PATCH
                Resource: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ApiGatewayRestApi}/stages/${ApiGatewayStage}"


  # CodeBuild Projects
  FrontendBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TransactionSimulatorFrontendBuild
      Description: Builds the React/TypeScript frontend into 'dist' directory.
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn # Role defined below
      Artifacts:
        Type: CODEPIPELINE # Output artifacts for the pipeline
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0 # Latest standard image (Ubuntu based)
        Type: LINUX_CONTAINER
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-frontend-build.yml
      TimeoutInMinutes: 10

  LambdaPackageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TransactionSimulatorLambdaPackage
      Description: Installs dependencies and zips the Lambda function code.
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-lambda-package.yml
      TimeoutInMinutes: 10

  StaticAnalysisProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TransactionSimulatorStaticAnalysis
      Description: Runs Checkov for IaC and ESLint for code analysis.
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-static-analysis.yml
      TimeoutInMinutes: 10

  TerraformPlanProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TransactionSimulatorTerraformPlan
      Description: Initializes Terraform and generates an execution plan.
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
        # Inject Supabase variables from Parameter Store
        EnvironmentVariables:
          - Name: TF_VAR_supabase_url
            Type: PARAMETER_STORE
            Value: /transaction-simulator/supabase/url
          - Name: TF_VAR_supabase_key
            Type: PARAMETER_STORE
            Value: /transaction-simulator/supabase/key
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-terraform-plan.yml
      TimeoutInMinutes: 15 # Terraform plan can sometimes take longer

  TerraformApplyProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TransactionSimulatorTerraformApply
      Description: Applies the Terraform execution plan to deploy infrastructure.
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
        # Inject Supabase variables from Parameter Store
        EnvironmentVariables:
          - Name: TF_VAR_supabase_url
            Type: PARAMETER_STORE
            Value: /transaction-simulator/supabase/url
          - Name: TF_VAR_supabase_key
            Type: PARAMETER_STORE
            Value: /transaction-simulator/supabase/key
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-terraform-apply.yml
      TimeoutInMinutes: 20 # Terraform apply can take longer

  SmokeTestsProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: TransactionSimulatorSmokeTests
      Description: Runs automated smoke tests against the deployed application.
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec-smoke-tests.yml
      TimeoutInMinutes: 10

  # IAM Role for all CodeBuild Projects
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TransactionSimulatorCodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess # Broad access for demo
        - arn:aws:iam::aws:policy/AmazonS3FullAccess # For CodeBuild artifacts
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess # For CodeBuild logs
        - arn:aws:iam::aws:policy/AWSSystemsManagerReadOnlyAccess # To access SSM parameters
      Policies:
        - PolicyName: CodeBuildTerraformPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Ref CodePipelineArtifactBucket.Arn
                  - !Sub "${CodePipelineArtifactBucket.Arn}/*"
                  - !Sub "arn:aws:s3:::transaction-simulator-terraform-tfstate" # Terraform state bucket
                  - !Sub "arn:aws:s3:::transaction-simulator-terraform-tfstate/*" # Terraform state bucket objects
                  - !Sub "arn:aws:s3:::transaction-simulator-frontend-*" # Frontend deployment S3 buckets
                  - !Sub "arn:aws:s3:::transaction-simulator-frontend-*/*" # Frontend deployment S3 bucket objects
              - Effect: Allow
                Action:
                  - dynamodb:CreateTable
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/terraform-state-lock-table" # Terraform state lock table
              - Effect: Allow
                Action:
                  - lambda:* # Allow Terraform to create/update Lambda functions
                  - apigateway:* # Allow Terraform to create/update API Gateway
                  - iam:* # Allow Terraform to create/update IAM roles/policies for Lambda/APIGW
                  - cloudwatch:PutMetricData # For API Gateway metrics
                  - logs:CreateLogGroup # For API Gateway logs
                  - logs:PutLogEvents # For API Gateway logs
                  - logs:CreateLogStream # For API Gateway logs
                Resource: "*" # Refine to specific ARNs in production

  # SNS Topic for Manual Approval notifications
  ManualApprovalSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TransactionSimulatorApprovalNotification
      DisplayName: Transaction Simulator Approval Notifications


  # CodePipeline Definition
  TransactionSimulatorPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: TransactionSimulatorDevSecOpsPipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket # Use the explicitly created artifact bucket

      Stages:
        # 1. Source Stage: Fetches code from GitHub
        - Name: Source
          Actions:
            - Name: SourceCode
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Join ['/', [!Ref AppGitHubOwner, !Ref AppGitHubRepoName]]
                BranchName: !Ref AppGitHubBranch
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1

        # 2. Build Frontend Stage
        - Name: Build-Frontend
          Actions:
            - Name: BuildFrontendApp
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref FrontendBuildProject # Reference the CodeBuild project
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: FrontendArtifact
              RunOrder: 1

        # 3. Build Lambda Package Stage
        - Name: Package-Lambda
          Actions:
            - Name: PackageLambdaCode
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref LambdaPackageProject # Reference the CodeBuild project
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: LambdaArtifact
              RunOrder: 1

        # 4. Static Analysis Stage (IaC & Code)
        - Name: Static-Analysis
          Actions:
            - Name: RunStaticAnalysis
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref StaticAnalysisProject # Reference the CodeBuild project
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: StaticAnalysisReport # Can collect scan reports
              RunOrder: 1

        # 5. Terraform Plan Stage
        - Name: Terraform-Plan
          Actions:
            - Name: GenerateTerraformPlan
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref TerraformPlanProject # Reference the CodeBuild project
              InputArtifacts:
                - Name: SourceOutput # Needed for the Terraform files
                - Name: FrontendArtifact # Needed for frontend/dist
                - Name: LambdaArtifact # Needed for lambda.zip
              OutputArtifacts:
                - Name: TerraformPlanArtifact # Contains plan.tfplan
              RunOrder: 1

        # 6. Manual Approval for Terraform Plan
        - Name: Approve-Terraform-Plan
          Actions:
            - Name: ReviewTerraformPlan
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                CustomData: "Review the Terraform plan (plan.tfplan) to ensure infrastructure changes are as expected before applying. Check the CodeBuild logs from the 'GenerateTerraformPlan' action."
                # Link to the S3 bucket where plan.tfplan might be inspectable, or just CodeBuild logs
                ExternalEntityLink: !Sub "https://${CodePipelineArtifactBucket.BucketName}.s3.${AWS::Region}.amazonaws.com/Terraform-Plan/GenerateTerraformPlan/plan.tfplan"
                NotificationArn: !GetAtt ManualApprovalSNSTopic.Arn
              InputArtifacts:
                - Name: TerraformPlanArtifact # Provides context for the approval
              RunOrder: 1

        # 7. Terraform Apply Stage (Deploys Infrastructure & Application)
        - Name: Terraform-Apply
          Actions:
            - Name: ApplyTerraformChanges
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref TerraformApplyProject # Reference the CodeBuild project
              InputArtifacts:
                - Name: TerraformPlanArtifact # Contains the approved plan.tfplan
              OutputArtifacts:
                - Name: TerraformOutputsArtifact # Contains terraform_outputs.json
              RunOrder: 1

        # 8. Lambda Canary Deployment Stage (Traffic Shifting)
        # This stage uses CodeDeploy's specific action type for Lambda deployments.
        # It relies on the Lambda versions and aliases being managed by Terraform in previous steps.
        - Name: Lambda-Canary-Deployment
          Actions:
            - Name: InitiateLambdaTrafficShift
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: TransactionSimulatorAPI # Matches the Lambda function name (or API Gateway name)
                # CodeDeploy needs to know the Lambda function name, its alias, and how to shift traffic.
                # It will use the latest Lambda version created by Terraform.
                DeploymentGroupName: TransactionSimulatorLambdaDeploymentGroup # This will be created via CodeDeploy deployment group resource (manual or CF)
                # DeploymentConfigName: CodeDeployDefault.LambdaAllAtOnce # For full rollout
                # For Canary:
                DeploymentConfigName: CodeDeployDefault.LambdaLinear10PercentEvery1Minute # Example Canary
                # Or for custom: CodeDeployDefault.LambdaCanary10Percent5Minutes
                # Or CodeDeployDefault.LambdaAllAtOnce for immediate full shift.
                # AutoRollbackConfiguration:
                #   Enabled: true
                #   Events:
                #     - DEPLOYMENT_FAILURE
                #     - DEPLOYMENT_STOP_ON_ALARM
              # Input artifacts are not explicitly required for CodeDeploy Lambda type if versions are managed by Lambda.
              # CodeDeploy identifies the function and aliases to shift traffic.
              RunOrder: 1

        # 9. Smoke Tests Stage (Post-Deployment Verification)
        - Name: Smoke-Tests
          Actions:
            - Name: RunSmokeTests
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref SmokeTestsProject # Reference the CodeBuild project
              InputArtifacts:
                - Name: TerraformOutputsArtifact # Contains terraform_outputs.json with URLs
              OutputArtifacts:
                - Name: SmokeTestReport # Can collect test results
              RunOrder: 1

Outputs:
  PipelineURL:
    Description: URL of the CodePipeline
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${TransactionSimulatorPipeline}/view?region=${AWS::Region}"
  FrontendWebsiteURL:
    Description: The URL of the deployed frontend website
    Value: !Select [0, !Split [" ", !GetAtt TerraformApplyProject.PrimarySources[0].SourceIdentifier]]
